window.SIDEBAR_ITEMS = {"macro":[["register_validate_block","Register the `validate_block` function that is used by parachains to validate blocks on a validator."]],"mod":[["pallet","The module that hosts all the FRAME types needed to add this pallet to a runtime."],["validate_block","A module that enables a runtime to work as parachain."]],"struct":[["AnyRelayNumber","Provides an implementation of [`CheckAssociatedRelayNumber`]."],["MessagingStateSnapshot","A snapshot of some messaging related state of relay chain pertaining to the current parachain."],["ParachainSetCode",""],["RelayChainState","Holds the most recent relay-parent state root and block number of the current parachain block."],["RelayChainStateProof","A state proof extracted from the relay chain."],["RelayNumberStrictlyIncreases","Provides an implementation of [`CheckAssociatedRelayNumber`]."],["RelaychainBlockNumberProvider","Implements [`BlockNumberProvider`] that returns relay chain block number fetched from validation data. When validation data is not available (e.g. within on_initialize), 0 will be returned."],["RelaychainDataProvider","Implements [`BlockNumberProvider`] and [`RelaychainStateProvider`] that returns relevant relay data fetched from validation data. NOTE: When validation data is not available (e.g. within on_initialize), default values will be returned."]],"trait":[["CheckAssociatedRelayNumber","Something that can check the associated relay block number."],["CheckInherents","Something that can check the inherents of a block."],["OnSystemEvent","Something that should be informed about system related events."],["RelaychainStateProvider","This exposes the [`RelayChainState`] to other runtime modules."]]};