window.SIDEBAR_ITEMS = {"enum":[["BuildOnAccess",""]],"fn":[["aura_build_import_queue","Build the import queue for Statemint and other Aura-based runtimes."],["contracts_rococo_build_import_queue",""],["new_partial","Starts a `ServiceBuilder` for a full service."],["rococo_parachain_build_import_queue","Build the import queue for the rococo parachain runtime."],["shell_build_import_queue","Build the import queue for the shell runtime."],["start_contracts_rococo_node","Start a parachain node."],["start_contracts_rococo_node_impl",""],["start_generic_aura_node","Start an aura powered parachain node. (collective-polkadot and statemine/t use this)"],["start_node_impl","Start a node with the given parachain `Configuration` and relay chain `Configuration`."],["start_rococo_parachain_node","Start a rococo parachain node."],["start_shell_node","Start a polkadot-shell parachain node."],["start_shell_node_impl","Start a shell node with the given parachain `Configuration` and relay chain `Configuration`."],["warn_if_slow_hardware","Checks that the hardware meets the requirements and print a warning otherwise."]],"struct":[["BridgeHubKusamaRuntimeExecutor",""],["BridgeHubPolkadotRuntimeExecutor",""],["BridgeHubRococoRuntimeExecutor",""],["CollectivesPolkadotRuntimeExecutor",""],["ContractsRococoRuntimeExecutor",""],["ShellRuntimeExecutor","Native executor instance."],["StatemineRuntimeExecutor","Native Statemine executor instance."],["StatemintRuntimeExecutor",""],["Verifier",""],["WaitForAuraConsensus","Special [`ParachainConsensus`] implementation that waits for the upgrade from shell to a parachain runtime that implements Aura."]],"type":[["AccountId","Some way of identifying an account on the chain. We intentionally make it equivalent to the public key of our transaction signing scheme."],["Balance","Balance of an account."],["Block","Opaque block type."],["BlockNumber","An index to a block."],["Hash","A hash of some data used by the chain."],["Header","Opaque block header type."],["HostFunctions",""],["Nonce","Index of a transaction in the chain."],["ParachainBackend",""],["ParachainBlockImport",""],["ParachainClient",""]]};