window.SIDEBAR_ITEMS = {"constant":[["XCM_VERSION","This module’s XCM version."]],"enum":[["AssetId","Classification of an asset being concrete or abstract."],["AssetInstance","A general identifier for an instance of a non-fungible asset class."],["BodyId","An identifier of a pluralistic body."],["BodyPart","A part of a pluralistic body."],["ChannelStatus","The status of a channel."],["Fungibility","Classification of whether an asset is fungible or not, along with a mandatory amount or instance."],["Instruction","Cross-Consensus Message: A message from one consensus system to another."],["Junction","A single item in a path to describe the relative location of a consensus system."],["Junctions","Non-parent junctions that can be constructed, up to the length of 8. This specific `Junctions` implementation uses a Rust `enum` in order to make pattern matching easier."],["MaybeErrorCode",""],["MessageSendError","Error description of a message send failure."],["MultiAssetFilter","`MultiAsset` collection, defined either by a number of `MultiAssets` or a single wildcard."],["NetworkId","A global identifier of a data structure existing within consensus."],["OriginKind","Basically just the XCM (more general) version of `ParachainDispatchOrigin`."],["Outcome","Outcome of an XCM execution."],["Response","Response data to a query."],["SendError","Error result value when attempting to send an XCM message."],["ServiceQuality","The “quality of service” considerations for message sending."],["WeightLimit","An optional weight limit."],["WildFungibility","Classification of whether an asset is fungible or not."],["WildMultiAsset","A wildcard representing a set of assets."],["XcmError","Error codes used in XCM. The first errors codes have explicit indices and are part of the XCM format. Those trailing are merely part of the XCM implementation; there is no expectation that they will retain the same index over time."],["XcmpMessageFormat","The aggregate XCMP message format."]],"fn":[["send_xcm","Convenience function for using a `SendXcm` implementation. Just interprets the `dest` and wraps both in `Some` before passing them as as mutable references into `T::send_xcm`."],["validate_send","Convenience function for using a `SendXcm` implementation. Just interprets the `dest` and wraps both in `Some` before passing them as as mutable references into `T::send_xcm`."]],"mod":[["opaque",""],["relay_chain","A module that re-exports relevant relay chain definitions."]],"struct":[["AbridgedHostConfiguration","Abridged version of `HostConfiguration` (from the `Configuration` parachains host runtime module) meant to be used by a parachain or PDK such as cumulus."],["AbridgedHrmpChannel","Abridged version of `HrmpChannel` (from the `Hrmp` parachains host runtime module) meant to be used by a parachain or PDK such as cumulus."],["Ancestor","A unit struct which can be converted into a `MultiLocation` of the inner `parents` value."],["AncestorThen","A unit struct which can be converted into a `MultiLocation` of the inner `parents` value and the inner interior."],["ChannelInfo","Information about an XCMP channel."],["CollationInfo","Information about a collation."],["CollationInfoV1","Information about a collation."],["InboundDownwardMessage","A wrapped version of `DownwardMessage`. The difference is that it has attached the block number when the message was sent."],["MultiAsset","Either an amount of a single fungible asset, or a single well-identified non-fungible asset."],["MultiAssets","A `Vec` of `MultiAsset`s."],["MultiLocation","A relative path between state-bearing consensus systems."],["PalletInfo",""],["ParaId","Unique identifier of a parachain."],["ParachainBlockData","The parachain block that is created by a collator."],["Parent","A unit struct which can be converted into a `MultiLocation` of `parents` value 1."],["ParentThen","A tuple struct which can be converted into a `MultiLocation` of `parents` value 1 with the inner interior."],["PersistedValidationData","The validation data provides information about how to create the inputs for validation of a candidate. This information is derived from the chain state and will vary from para to para, although some fields may be the same for every para."],["QueryResponseInfo","Information regarding the composition of a query response."],["ValidationParams","Validation parameters for evaluating the parachain validity function."],["Xcm",""],["XcmContext","Contextual data pertaining to a specific list of XCM instructions."]],"trait":[["CollectCollationInfo","Runtime api to collect information about a collation."],["DmpMessageHandler","Something that should be called when a downward message is received."],["ExecuteXcm","Type of XCM message executor."],["GetChannelInfo",""],["IsSystem","Determine if a parachain is a system parachain or not."],["PreparedMessage",""],["SendXcm","Utility for sending an XCM message to a given location."],["Unwrappable",""],["UpwardMessageSender","Something that should be called when sending an upward message."],["XcmWeightInfo",""],["XcmpMessageHandler","Something that should be called for each batch of messages received over XCMP."],["XcmpMessageSource","A means of figuring out what outbound XCMP messages should be being sent."]],"type":[["InboundHrmpMessage","An inbound HRMP message."],["InteriorMultiLocation","A relative location which is constrained to be an interior location of the context."],["OutboundHrmpMessage","And outbound HRMP message"],["QueryId","An identifier for a query."],["SendResult","Result value when attempting to send an XCM message."],["UpwardMessage","A message from a parachain to its Relay Chain."],["XcmHash","A hash type for identifying messages."],["XcmResult",""]]};